<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0">

#if ($useSAM)
    <reference id="eventFeature" interface="org.talend.esb.sam.agent.feature.EventFeature" />
#end ## ($useSAM)

#if ($useEncryption || $useServiceRegistry)
    <reference id="xkmsCryptoProviderFactory" interface="org.apache.cxf.xkms.crypto.CryptoProviderFactory" />
    <bean id="cryptoProvider" factory-ref="xkmsCryptoProviderFactory" factory-method="create" />
#end ## ($useEncryption || $useServiceRegistry)

#if ($useSecuritySAML || $useServiceRegistry)
#[[
    <property-placeholder persistent-id="org.talend.esb.job.service" placeholder-prefix="$serviceDefault{"
        xmlns="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.2.0" />
    <property-placeholder ]]#persistent-id="org.talend.esb.job.service.${samlConfig}"#[[ placeholder-prefix="$service{"
        xmlns="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.2.0" >
        <default-properties>
            <property name="ws-security.signature.username" value="$serviceDefault{ws-security.signature.username}"/>
            <property name="ws-security.signature.password" value="$serviceDefault{ws-security.signature.password}"/>
            <property name="ws-security.signature.properties" value="$serviceDefault{ws-security.signature.properties}"/>
        </default-properties>
    </property-placeholder>
]]#
#end ## ($useSecuritySAML || $useServiceRegistry)

    <jaxws:endpoint xmlns:jaxws="http://cxf.apache.org/blueprint/jaxws"
            id="${service}"
            implementor="#genericServiceProvider"
            xmlns:tns="${namespace}"
            serviceName="tns:${service}"
            endpointName="tns:${port}"
            address="${address}"
            wsdlLocation="classpath:/${wsdlLocation}">
        <jaxws:properties>
#if ($useWsdlSchemaValidation && !$useServiceRegistry)
            <entry key="schema-validation-enabled" value="true" />
#end ## ($useWsdlSchemaValidation && !$useServiceRegistry)
#if ($useSecurityToken || $useServiceRegistry)
            <entry key="ws-security.ut.validator">
                <bean class="org.apache.ws.security.validate.JAASUsernameTokenValidator">
                    <property name="contextName" value="karaf" />
                </bean>
            </entry>
#end ## ($useSecurityToken || $useServiceRegistry)
#if ($useSecuritySAML || $useServiceRegistry)
#[[
            <entry key="ws-security.signature.username" value="$service{ws-security.signature.username}" />
            <entry key="ws-security.callback-handler">
                <bean class="org.apache.cxf.interceptor.security.NamePasswordCallbackHandler">
                    <argument type="java.lang.String" value="$service{ws-security.signature.username}" />
                    <argument type="java.lang.String" value="$service{ws-security.signature.password}" />
                    <argument type="java.lang.String" value="setPassword" />
                </bean>
            </entry>
            <entry key="ws-security.signature.properties" value="$service{ws-security.signature.properties}" />
]]#
#if ($useEncryption || $useServiceRegistry)
            <entry key="ws-security.encryption.crypto" value-ref="cryptoProvider" />
            <entry key="ws-security.encryption.username" value="$service{ws-security.encryption.username}"/>
#end ## ($useEncryption || $useServiceRegistry)
#end ## ($useSecuritySAML || $useServiceRegistry)

            <entry key="use.service.registry" value="${useServiceRegistry}" />
        </jaxws:properties>
        <jaxws:features>
#if ($useSAM)
            <ref component-id="eventFeature" />
#end ## ($useSAM)
#if ($useSL)
            <bean class="org.talend.esb.servicelocator.cxf.LocatorFeature">
#if (!$slCustomProps.isEmpty())
                <property name="availableEndpointProperties">
                    <map>
#foreach ($entry in $slCustomProps.entrySet())
                        <entry key="${entry.key}" value="${entry.value}" />
#end ## ($entry in $slCustomProps.entrySet())
                    </map>
                </property>
#end ## (!$slCustomProps.isEmpty())
            </bean>
#end ## ($useSL)
#if ($logMessages)
            <bean class="org.apache.cxf.feature.LoggingFeature" />
#end ## ($logMessages)
#if ($useSecurityToken || $useSecuritySAML)
            <p:policies xmlns:p="http://cxf.apache.org/policy">
                <wsp:Policy xmlns:wsp="http://www.w3.org/ns/ws-policy">
#if ($useSecurityToken && $useSecuritySAML)
                    <wsp:ExactlyOne>
                        <wsp:All>
                            <wsp:PolicyReference URI="org.talend.esb.job.token.policy" />
                        </wsp:All>
                        <wsp:All>
#if ($useAuthorization)
#if ($useEncryption)
                            <wsp:PolicyReference URI="org.talend.esb.job.saml.authz.crypto.policy" />
#else ## !($useEncryption)
                            <wsp:PolicyReference URI="org.talend.esb.job.saml.authz.policy" />
#end ## ($useEncryption)
#else ## !($useAuthorization)
#if ($useEncryption)
                            <wsp:PolicyReference URI="org.talend.esb.job.saml.crypto.policy" />
#else ## !($useEncryption)
                            <wsp:PolicyReference URI="org.talend.esb.job.saml.policy" />
#end ## ($useEncryption)
#end ## ($useAuthorization)
                        </wsp:All>
                    </wsp:ExactlyOne>
#elseif ($useSecurityToken) ## ($useSecurityToken && $useSecuritySAML)
                    <wsp:PolicyReference URI="org.talend.esb.job.token.policy" />
#elseif ($useSecuritySAML) ## ($useSecurityToken)
#if ($useAuthorization)
#if ($useEncryption)
                    <wsp:PolicyReference URI="org.talend.esb.job.saml.authz.crypto.policy" />
#else ## !($useEncryption)
                    <wsp:PolicyReference URI="org.talend.esb.job.saml.authz.policy" />
#end ## ($useEncryption)
#else ## !($useAuthorization)
#if ($useEncryption)
                    <wsp:PolicyReference URI="org.talend.esb.job.saml.crypto.policy" />
#else ## !($useEncryption)
                    <wsp:PolicyReference URI="org.talend.esb.job.saml.policy" />
#end ## ($useEncryption)
#end ## ($useAuthorization)
#end ## ($useSecuritySAML)
                </wsp:Policy>
            </p:policies>
#end ## ($useSecurityToken || $useSecuritySAML)
#if ($useBusinessCorrelation)
            <bean class="org.talend.esb.policy.correlation.feature.CorrelationIDFeature" />
#end ## ($useBusinessCorrelation)
        </jaxws:features>
    </jaxws:endpoint>

    <bean class="org.apache.cxf.management.counters.CounterRepository">
        <property name="bus" ref="cxf" />
    </bean>

    <reference interface="org.talend.esb.job.controller.ProviderFactory" id="providerFactory" />
    <bean id="genericServiceProvider" factory-ref="providerFactory" factory-method="create">
        <argument>
            <map>
#foreach ($entry in $operation2job.entrySet())
                <entry key="${entry.key}" value="${entry.value}" />
#end ## ($entry in $operation2job.entrySet())
            </map>
        </argument>
#if ($useSecurityToken || $useSecuritySAML)
        <argument type="org.apache.cxf.Bus" ref="cxf" />
#end ## ($useSecurityToken || $useSecuritySAML)
#if ($useSAM)
        <property name="eventFeature" ref="eventFeature" />
#end ## ($useSAM)
        <property name="extractHeaders" value="true" />
    </bean>
    <service ref="genericServiceProvider" interface="org.osgi.service.cm.ManagedService">
        <service-properties>
            <entry key="service.pid" value="${studioName}" />
        </service-properties>
    </service>

</blueprint>
