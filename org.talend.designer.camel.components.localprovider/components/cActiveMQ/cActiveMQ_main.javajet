<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.core.model.process.IConnection
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
    java.util.Map
" 
%>
<%
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode) codeGenArgument.getArgument();

    String name = node.getUniqueName();
    String type = ElementParameterParser.getValue(node, "__TYPE__");
    String destination = ElementParameterParser.getValue(node, "__DESTINATION__");

    boolean hasOptions = false;

    StringBuffer sb = new StringBuffer();
    sb.append("\"");
    sb.append(name);
    sb.append(":");
    sb.append(type);
    sb.append(":");
    sb.append(destination);
   

    List<Map<String, String>> tableValues = (List<Map<String, String>>) ElementParameterParser.getObjectValue(node,
            "__URI_OPTIONS__");
    for (Map<String, String> map : tableValues) {
        String argName = map.get("NAME");
        String argValue = map.get("VALUE");

        if (argValue.startsWith("\"")) {
            argValue = argValue.substring(1);
        }
        if (argValue.endsWith("\"")) {
            argValue = argValue.substring(0, argValue.length() - 1);
        }

        if (argName.startsWith("\"")) {
            argName = argName.substring(1);
        }
        if (argName.endsWith("\"")) {
            argName = argName.substring(0, argName.length() - 1);
        }

        argName = argName.trim();

        if (!hasOptions) {
            sb.append("?" + argName + "=" + argValue);
            hasOptions = true;
        } else {
            sb.append("&" + argName + "=" + argValue);
        }
    }
    
    sb.append("\"");
    String uri = sb.toString();
    String broker = "";
    sb = new StringBuffer();

    String complicated = ElementParameterParser.getValue(node, "__CUSTOMIZED__");
    String brokerUri = ElementParameterParser.getValue(node, "__BROKER_URI__");
    String protocol = ElementParameterParser.getValue(node, "__PROTOCOL__");
    String server = ElementParameterParser.getValue(node, "__SERVER__");
    String port = ElementParameterParser.getValue(node, "__PORT__");

    if ("custom".equals(protocol)) {
        protocol = ElementParameterParser.getValue(node, "__CUSTOM_PROTOCOL__");
    }

    if ("true".equals(complicated)) {
        if (brokerUri.startsWith("\"")) {
            brokerUri = brokerUri.substring(1);
        }
        if (brokerUri.endsWith("\"")) {
            brokerUri = brokerUri.substring(0, brokerUri.length() - 1);
        }
        sb.append("\"");
        sb.append(brokerUri);
        sb.append("\"");
    } else {
        sb.append("\"");
        sb.append(protocol);
        sb.append(":");
        sb.append(server);
        sb.append(":");
        sb.append(port);

   
        hasOptions = false;
        tableValues = (List<Map<String, String>>) ElementParameterParser.getObjectValue(node,
                "__BROKER_OPTIONS__");
        for (Map<String, String> map : tableValues) {
            String argName = map.get("NAME");
            String argValue = map.get("VALUE");

            if (argValue.startsWith("\"")) {
                argValue = argValue.substring(1);
            }
            if (argValue.endsWith("\"")) {
                argValue = argValue.substring(0, argValue.length() - 1);
            }

            if (argName.startsWith("\"")) {
                argName = argName.substring(1);
            }
            if (argName.endsWith("\"")) {
                argName = argName.substring(0, argName.length() - 1);
            }

            argName = argName.trim();

            if (!hasOptions) {
                sb.append("?" + argName + "=" + argValue);
                hasOptions = true;
            } else {
                sb.append("&" + argName + "=" + argValue);
            }
        }

    }
    sb.append("\"");
    broker = sb.toString();
    
	List< ? extends IConnection> conns = node.getIncomingConnections();
	if(conns.size()>0) {
%>
		.to(<%=uri%>)
<%
	} else {
%>
		from(<%=uri%>)
<%
	}
%>
