<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.IElementParameter
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
    java.util.Map
    java.io.UnsupportedEncodingException
    java.net.URLEncoder
" 
%>
<%
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode) codeGenArgument.getArgument();
   	String cid = "";
   	IElementParameter param = node.getElementParameter("LABEL");
   	if(param != null && !"__UNIQUE_NAME__".equals(param.getValue())){
   		cid = (String)param.getValue();	
   	}else{
   		cid = node.getUniqueName();
   	}

    String filePath = ElementParameterParser.getValue(node, "__URI__");
    if (filePath.startsWith("\"")) {
        filePath = filePath.substring(1);
    }
    if (filePath.endsWith("\"")) {
        filePath = filePath.substring(0, filePath.length() - 1);
    }
    

    String noop = ElementParameterParser.getValue(node, "__NOOP__");
    String flatten = ElementParameterParser.getValue(node, "__FLATTEN__");
    String bufferSize = ElementParameterParser.getValue(node, "__BUFFER_SIZE__");
    String autoCreate = ElementParameterParser.getValue(node, "__AUTOCREATE__");
    String fileName = ElementParameterParser.getValue(node, "__FILENAME__");
    String charset = ElementParameterParser.getValue(node, "__ENCODING__");
    
    if (fileName.startsWith("\"")) {
        fileName = fileName.substring(1);
    }
    if (fileName.endsWith("\"")) {
        fileName = fileName.substring(0, fileName.length() - 1);
    }
    
    if (bufferSize.startsWith("\"")) {
        bufferSize = bufferSize.substring(1);
    }
    if (bufferSize.endsWith("\"")) {
        bufferSize = bufferSize.substring(0, bufferSize.length() - 1);
    }

    if (charset.startsWith("\"")) {
        charset = charset.substring(1);
    }
    if (charset.endsWith("\"")) {
        charset = charset.substring(0, charset.length() - 1);
    }

    StringBuffer arguments = new StringBuffer();

    String uri = "\"file:///" + filePath;

    if ("true".equals(noop)) {
        arguments.append("noop=true");
    } else {
        arguments.append("noop=false");
    }

    if ("false".equals(autoCreate)) {// default true, ignore.
        arguments.append("&autoCreate=false");
    }
    
    if ("true".equals(flatten)) {// default false, ignore.
        arguments.append("&flatten=true");
    }

    if (fileName != null && fileName.length() > 0) {
        arguments.append("&fileName=" + fileName);
    }
    
    if (charset != null && charset.length() > 0) {
        arguments.append("&charset=" + charset);
    }
    
    if (bufferSize != null && bufferSize.length() > 0) {
        arguments.append("&bufferSize=" + bufferSize);
    }

    List<Map<String, String>> tableValues = (List<Map<String, String>>) ElementParameterParser.getObjectValue(node,
            "__ADVARGUMENTS__");
    for (Map<String, String> map : tableValues) {
        String argName = map.get("NAME");
        String argValue = map.get("VALUE");

        if (argValue.startsWith("\"")) {
            argValue = argValue.substring(1);
        }
        if (argValue.endsWith("\"")) {
            argValue = argValue.substring(0, argValue.length() - 1);
        }

        if (argName.startsWith("\"")) {
            argName = argName.substring(1);
        }
        if (argName.endsWith("\"")) {
            argName = argName.substring(0, argName.length() - 1);
        }
        
        argName = argName.trim();
        
        try {
             argValue =  URLEncoder.encode(argValue,"UTF-8");
        } catch (UnsupportedEncodingException e) {
        
        }
        
        arguments.append("&" + argName + "=" + argValue);
    }

    if (arguments.length() > 0) {
        uri = uri + "?" + arguments.toString() + "\"";
    } else {
        uri = uri + "\"";
    }
    
    String uriRef = "uriMap.get(\"" + cid + "\")";
	List< ? extends IConnection> conns = node.getIncomingConnections();
	if(conns.size()>0) {
%>
		.to(<%=uriRef%>)
<%
	} else {
%>
		from(<%=uriRef%>)
<%
	}
%>
