<?xml version="1.0" encoding="UTF-8"?>
<!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor 
	license agreements. See the NOTICE file distributed with this work for additional 
	information regarding copyright ownership. The ASF licenses this file to 
	You under the Apache License, Version 2.0 (the "License"); you may not use 
	this file except in compliance with the License. You may obtain a copy of 
	the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required 
	by applicable law or agreed to in writing, software distributed under the 
	License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS 
	OF ANY KIND, either express or implied. See the License for the specific 
	language governing permissions and limitations under the License. -->

<!-- Configures the Camel Context -->

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cxf="http://activemq.apache.org/camel/schema/cxfEndpoint"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">

	<!-- import the ActiveMQ broker to act as server -->
	<import resource="activemq-broker.xml" />
	<import resource="camel-cxf.xml" />

	<!-- define the datasource to the database - in this example we use an in 
		memory database using HSQLDB -->
	<bean id="inventoryDB"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="org.hsqldb.jdbcDriver" />
		<property name="url" value="jdbc:hsqldb:mem:inventory" />
		<property name="username" value="sa" />
		<property name="password" value="" />
	</bean>

	<!-- bean which ensures the database table is created -->
	<bean id="inventoryCreateTable" class="camelinaction.InventoryCreateTable">
		<constructor-arg index="0" ref="inventoryDB" />
	</bean>

	<bean class="camelinaction.InventoryUpdater">
		<constructor-arg index="0" ref="inventoryDB" />
	</bean>

	<!-- camel activemq component to connect to the broker -->
	<bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent">
		<property name="brokerURL" value="tcp://localhost:61616" />
	</bean>

  <bean id="jms" class="org.apache.camel.component.jms.JmsComponent">
    <property name="connectionFactory">
      <bean class="com.ibm.mq.jms.MQQueueConnectionFactory">
        <property name="queueManager" value="mq.queue.manager" />
        <property name="transportType" value="1" />
        <property name="hostName" value="192.168.92.132" />
        <property name="port" value="1414" />
      </bean>
    </property>
  </bean>


	<bean id="jms2" class="org.apache.camel.component.jms.JmsComponent">
		<property name="connectionFactory">
			<bean class="org.apache.activemq.ActiveMQConnectionFactory">
				<property name="brokerURL"
					value="vm://localhost?broker.persistent=false&amp;broker.useJmx=false" />
			</bean>
		</property>
	</bean>

	<bean id="myStrategy" class="org.apache.camel.example.NumberAggregationStrategy" />
	<bean id="mySlip" class="aaa.bbb" />
	<bean id="myRepo" class="aaa.bbb" />
	<camelContext id="camel" xmlns="http://camel.apache.org/schema/spring">
		<onException>
			<exception>com.mycompany.ValidationException</exception>
			<redeliveryPolicy maximumRedeliveries="2" />
			<log message="Order failed" />
		</onException>
		<intercept>
			<to uri="log:hello" />
			<pipeline>
				<bean ref="foo" />
				<bean ref="bar" />
				<to uri="activemq:OutputQueue" />
			</pipeline>
		</intercept>
		<route>
			<from uri="file:aaa" />
			<to uri="file:bbb" />
		</route>
		<!-- simple bridge from a topic to queue -->
		<route>
			<from uri="activemq:topic:topic.HelloWorld.incoming" />
			<to uri="jms:queue:queue.name" />
			<loop>
				<constant>8</constant>
				<to uri="mock:result" />
				<to uri="mock:result" />
			</loop>
			<enrich uri="direct:resource" strategyRef="myStrategy" />
			<to uri="file:data?noop=true" />
		</route>
		<route>
			<from
				uri="ftp://scott@localhost/public/reports?password=tiger&amp;binary=true&amp;delay=60000" />
			<convertBodyTo type="String" />
			<log message="Incoming ${body}" />
			<!-- simulate processing time -->
			<delay>
				<constant>3000</constant>
			</delay>
			<aggregate>
				<correlationExpression>
					<simple>header.cheese</simple>
				</correlationExpression>
				<to uri="mock:result" />
				<to uri="mock:result" />
			</aggregate>
			<throttle maximumRequestsPerPeriod="3" timePeriodMillis="10000">
				<to uri="mock:result" />
				<stop />
			</throttle>
			<process ref="csvProcessor" />
		</route>
		<!-- Dependencies: camel-juel-[camel-n].jar, juel-[juel-n]-impl.jar, juel-[juel-n].jar 
			must be in the activemq lib directory -->
		<!-- 2 separate JUEL based filters -->
		<route>
			<from uri="file:data?noop=true" />
			<idempotentConsumer messageIdRepositoryRef="myRepo">
				<!-- use the messageId header as key for identifying duplicate messages -->
				<header>messageId</header>
				<!-- if not a duplicate send it to this mock endpoint -->
				<to uri="mock:result" />
				<to uri="mock:result" />
			</idempotentConsumer>
			<setExchangePattern pattern="InOnly" />
			<dynamicRouter>
				<!-- use a method call on a bean as dynamic router -->
				<method ref="mySlip" method="slip" />
			</dynamicRouter>
			<multicast stopOnException="true">
				<to uri="direct:foo" />
				<to uri="direct:bar" />
				<to uri="direct:baz" />
			</multicast>
			<filter>
				<el>${in.headers.JMSType.equals('bar')}</el>
				<filter>
					<el>${in.headers.myHeaderField.equals('takeMe')}</el>
					<filter>
						<xpath>$JMSType = 'foo' and $myCustomHeader='takeMe'</xpath>
						<to uri="activemq:queue:queue.HelloWorld.camel1.fooMsgs.special" />
						<to uri="mock:result" />
					</filter>
					<to uri="mock:result" />
					<to uri="mock:result" />
				</filter>
			</filter>
			<wireTap uri="direct:incoming" />
		</route>

		<!-- route using 2 separate xpath based filters, assuming the message has 
			an XML body -->

		<route>
			<from uri="activemq:topic:topic.HelloWorld.incoming.camel2" />
			<to uri="cxf:bean:orderEndpoint" />
			<doTry>
				<doTry>
					<process ref="processorFail" />
					<to uri="mock:result" />
					<doCatch>
						<!-- catch multiple exceptions -->
						<exception>java.io.IOException</exception>
						<exception>java.lang.IllegalStateException</exception>
						<to uri="mock:catch" />
						<to uri="direct:update" />
					</doCatch>
					<doFinally>
						<to uri="mock:finally" />
						<to uri="direct:update" />
					</doFinally>
				</doTry>
				<process ref="processorFail" />
				<to uri="mock:result" />
				<doCatch>
					<!-- catch multiple exceptions -->
					<exception>java.io.IOException</exception>
					<exception>java.lang.IllegalStateException</exception>
					<to uri="mock:catch" />
					<to uri="direct:update" />
				</doCatch>
				<doFinally>
					<to uri="mock:finally" />
					<to uri="direct:update" />
				</doFinally>
			</doTry>
			<to uri="mock:result" />
			<choice>
				<when>
					<xpath>$JMSType = 'foo1'</xpath>
					<to uri="activemq:queue:queue.HelloWorld.camel3.fooMsgs" />
					<to uri="direct:update" />
				</when>
				<when>
					<xpath>$JMSType = 'foo2'</xpath>
			 		<choice>
						<when>
							<xpath>$JMSType = 'foo1'</xpath>
							<to uri="activemq:queue:queue.HelloWorld.camel3.fooMsgs" />
							<to uri="direct:update" />
						</when>
						<when>
							<xpath>$JMSType = 'foo2'</xpath>
							<to uri="activemq:queue:queue.HelloWorld.camel3.fooMsgs" />
							<to uri="direct:update" />
						</when>
						<otherwise>
							<to uri="activemq:queue:queue.HelloWorld.camel3.nonFooMsgs" />
							<to uri="direct:update" />
						</otherwise>
					</choice>
					<to uri="activemq:queue:queue.HelloWorld.camel3.fooMsgs" />
					<to uri="direct:update" />
				</when>
				<otherwise>
					<to uri="activemq:queue:queue.HelloWorld.camel3.nonFooMsgs" />
					<to uri="direct:update" />
				</otherwise>
			</choice>
			<setBody>
				<constant>Bar message</constant>
			</setBody>
			<to uri="file:///C:/data/input" />
		</route>

		<route>
			<from uri="activemq:topic:topic.HelloWorld.incoming.camel6" />
			<setHeader headerName="mySlip">
				<!-- this is the bean which computes the header -->
				<method beanType="camelinaction.ComputeSlip" />
			</setHeader>
			<!-- use the routing slip EIP to route the message -->
			<routingSlip>
				<header>mySlip</header>
			</routingSlip>
			<to uri="file:///data" />
			<loadBalance>
				<roundRobin />
				<!-- these are the 2 processors which we balance across -->
				<!-- notice its just DSL in the Camel route, so you can balance across 
					whatever you can do in the DSL -->
				<to uri="seda:a" />
				<to uri="seda:b" />
				<loadBalance>
					<roundRobin />
					<!-- these are the 2 processors which we balance across -->
					<!-- notice its just DSL in the Camel route, so you can balance across 
						whatever you can do in the DSL -->
					<to uri="seda:a" />
					<to uri="seda:b" />
				</loadBalance>
			</loadBalance>
			<pollEnrich uri="file:inbox?fileName=data.txt" timeout="5000" />
			<split streaming="true" executorServiceRef="myPool">
				<!-- split the file line by line -->
				<tokenize token="\n" />
				<!-- convert the line from CSV to Object -->
				<bean beanType="camelinaction.InventoryService" method="csvToObject" />
				<!-- continue in next route -->
				<to uri="direct:update" />
			</split>
			<to uri="mock:b" />
			<split streaming="true" executorServiceRef="myPool">
				<xpath>/invoice/lineItems</xpath>
				<to uri="seda:b" />
			</split>
			<split>
				<simple>${body}</simple>
				<to uri="mock:result" />
			</split>


		</route>
	</camelContext>
</beans>
