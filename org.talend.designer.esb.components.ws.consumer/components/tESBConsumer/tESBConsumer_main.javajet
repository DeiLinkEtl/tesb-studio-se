<%@ jet
    skeleton="tESBConsumer_main.skeleton"
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode) codeGenArgument.getArgument();
initOptions(node);

String projectName = codeGenArgument.getCurrentProjectName();

if (inputConn != null) {
    for (IConnection conn : dataOutputs) {
%>
        <%=conn.getName()%> = null;
<%
    }
%>
    final javax.xml.namespace.QName serviceName_<%=cid%> = new javax.xml.namespace.QName("<%=serviceNS%>", "<%=serviceName%>");
    final javax.xml.namespace.QName portName_<%=cid%> = new javax.xml.namespace.QName("<%=portNS%>", "<%=portName%>");

    try {
        routines.system.Document requestTalendDoc_<%=cid%> = <%=inputConn.getName()%>.payload;

        try {
            org.dom4j.Document responseDoc_<%=cid%> = null;

            <% if (useSl) { %>
                final java.util.Map<String, String> slCustomProps_<%=cid%> = new java.util.HashMap<String, String>();
                <%
                for(Entry<String, String> prop : getSLProperties()) {
                    %>slCustomProps_<%=cid%>.put(<%=prop.getKey()%>, <%=prop.getValue()%>);<%
                }
            } %>

            java.util.Map<String, String> customProps_<%=cid%> = null;
            <% if (useSAM) {
                List<Entry<String, String>> customProperties = getSAMProperties();
                if (!customProperties.isEmpty()) { %>
                    customProps_<%=cid%> = new java.util.HashMap<String, String>();
                    <% for (Entry<String, String> prop : customProperties) { %>
                    customProps_<%=cid%>.put(<%=prop.getKey()%>, <%=prop.getValue()%>);
                    <% } %>
                <% } %>
            <% } %>
            <% if (useBusinessCorrelation || useSR) { %>
                class EsbJobCorrelationCallbackHandler implements org.talend.esb.policy.correlation.CorrelationIDCallbackHandler {
                    private String correlationId;
                    public EsbJobCorrelationCallbackHandler(final String correlationId) {
                        if (null != correlationId && correlationId.length() > 0) {
                            this.correlationId = correlationId;
                        }
                    }
                    public String getCorrelationId() {
                        return correlationId;
                    };
                }
                final Object correlationIDCallbackHandler = new EsbJobCorrelationCallbackHandler(<%=correlationValue%>);
            <% } %>

            final List<org.apache.cxf.headers.Header> soapHeaders_<%=cid%> = new java.util.ArrayList<org.apache.cxf.headers.Header>();
            <% if (authPropagateUP || authPropagateCertificate) { %>
                final Object securityToken_<%=cid%>;
                <% List<? extends INode> nodesProviderRequest = node.getProcess().getNodesOfType("tESBProviderRequest");
                if (!nodesProviderRequest.isEmpty()) { %>
                    securityToken_<%=cid%> = globalMap.get("<%=nodesProviderRequest.iterator().next().getUniqueName()%>_SECURITY_TOKEN");
            <% }
            } if (hasHeaders) { %>
                final routines.system.Document headersTalendDoc_<%=cid%> = <%=inputConn.getName()%>.headers;
                if (null != headersTalendDoc_<%=cid%> && null != headersTalendDoc_<%=cid%>.getDocument()) {
                    javax.xml.transform.dom.DOMResult result = new javax.xml.transform.dom.DOMResult();
                    javax.xml.transform.TransformerFactory.newInstance().newTransformer().transform(new org.dom4j.io.DocumentSource(headersTalendDoc_<%=cid%>.getDocument()), result);
                    for (org.w3c.dom.Node node = ((org.w3c.dom.Document) result.getNode()).getDocumentElement().getFirstChild();
                            node != null;
                            node = node.getNextSibling()) {
                        if (org.w3c.dom.Node.ELEMENT_NODE == node.getNodeType()) {
                            soapHeaders_<%=cid%>.add(new org.apache.cxf.headers.Header(new javax.xml.namespace.QName(node.getNamespaceURI(), node.getLocalName()), node));
                        }
                    }
                }
            <% } %>

            if (null == this.registry) {
                GenericConsumer genericConsumer_<%=cid%> = new GenericConsumer();
                genericConsumer_<%=cid%>.setServiceQName(serviceName_<%=cid%>);
                genericConsumer_<%=cid%>.setPortQName(portName_<%=cid%>);
                genericConsumer_<%=cid%>.setOperationQName(new javax.xml.namespace.QName("<%=methodNS%>", "<%=method%>"));
                genericConsumer_<%=cid%>.setIsRequestResponse(<%="request-response".equals(getStringParam("__COMMUNICATION_STYLE__"))%>);
                <% String soapAction=getStringParam("__SOAP_ACTION__");
                    if(soapAction != null && (!soapAction.matches("\\s*"))) { %>
                        genericConsumer_<%=cid%>.setSoapAction("<%=soapAction%>");
                <%  } %>

                genericConsumer_<%=cid%>.setAddress(<%=getStringParam("__ESB_ENDPOINT__")%>);
                if (null != getClass().getResourceAsStream("wsdl/<%=cid%>.wsdl")) {
                    genericConsumer_<%=cid%>.setWsdlURL("classpath:/" + this.getClass().getPackage().getName().replace(".", "/") + "/wsdl/<%=cid%>.wsdl");
                }

                java.util.Collection<org.apache.cxf.feature.Feature> esbFeatures_<%=cid%> =
                        new java.util.ArrayList<org.apache.cxf.feature.Feature>();

                <% if (useSl) { %>
                    genericConsumer_<%=cid%>.setAddress("locator://");

                    // if (!inOSGi) {
                    genericConsumer_<%=cid%>.setBus(new org.apache.cxf.bus.spring.SpringBusFactory().createBus("META-INF/tesb/locator/beans.xml"));
                    // }
                    org.talend.esb.servicelocator.cxf.LocatorFeature featureSL_<%=cid%> = new org.talend.esb.servicelocator.cxf.LocatorFeature();
                    if (null != slCustomProps_<%=cid%> && !slCustomProps_<%=cid%>.isEmpty()) {
                        featureSL_<%=cid%>.setRequiredEndpointProperties(slCustomProps_<%=cid%>);
                    }
                    esbFeatures_<%=cid%>.add(featureSL_<%=cid%>);
                <% } %>
                <% if (useSAM) { %>
                    // if (null == eventFeature) {
                    org.springframework.context.support.ClassPathXmlApplicationContext classpathXmlApplicationContext =
                            new org.springframework.context.support.ClassPathXmlApplicationContext("META-INF/tesb/agent-context.xml");
                    org.talend.esb.sam.agent.feature.EventFeature featureSAM_<%=cid%> = classpathXmlApplicationContext.getBean(org.talend.esb.sam.agent.feature.EventFeature.class);
                    // }
                    if (null != customProps_<%=cid%> && !customProps_<%=cid%>.isEmpty()) {
                        org.talend.esb.sam.common.handler.impl.CustomInfoHandler ciHandler = new org.talend.esb.sam.common.handler.impl.CustomInfoHandler();
                        ciHandler.setCustomInfo(customProps_<%=cid%>);
                        featureSAM_<%=cid%>.setHandler(ciHandler);
                    }
                    esbFeatures_<%=cid%>.add(featureSAM_<%=cid%>);
                <% } %>
                <% if (useBusinessCorrelation) { %>
                    esbFeatures_<%=cid%>.add(new org.talend.esb.policy.correlation.feature.CorrelationIDFeature());
                <% } %>
                <% if(useBusinessCorrelation || useSR) { %>
                    genericConsumer_<%=cid%>.setCorrelationIDCallbackHandler(correlationIDCallbackHandler);
                <% } %>
                genericConsumer_<%=cid%>.setEsbFeatures(esbFeatures_<%=cid%>);

                <% if (useAuth) { %>
                    genericConsumer_<%=cid%>.setAuthType("<%=authType%>");
                    genericConsumer_<%=cid%>.setUsername(<%=username%>);
                    genericConsumer_<%=cid%>.setPassword(<%=password%>);
                <% } %>
                <% if (getBoolParam("__USE_PROXY__")) { %>
                    genericConsumer_<%=cid%>.setProxyServer(<%=getStringParam("__PROXY_HOST__")%>);
                    genericConsumer_<%=cid%>.setProxyPort(<%=getStringParam("__PROXY_PORT__")%>);
                    genericConsumer_<%=cid%>.setProxyUsername(<%=getStringParam("__PROXY_USERNAME__")%>);
                    genericConsumer_<%=cid%>.setProxyPassword(<%=getStringParam("__PROXY_PASSWORD__")%>);
                <% } %>
                genericConsumer_<%=cid%>.setConnectionTimeout((long)(<%=connTimeout%> * 1000L));
                genericConsumer_<%=cid%>.setReceiveTimeout((long)(<%=receiveTimeout%> * 1000L));

                genericConsumer_<%=cid%>.setLogMessages(<%=logMessages%>);

                <% if (getBoolParam("__NEED_SSL_TO_TRUSTSERVER__")) { %>
                    System.setProperty("java.protocol.handler.pkgs", "com.sun.net.ssl.internal.www.protocol");
                    System.setProperty("javax.net.ssl.trustStore", <%=getStringParam("__SSL_TRUSTSERVER_TRUSTSTORE__")%>);
                    System.setProperty("javax.net.ssl.trustStorePassword", <%=getStringParam("__SSL_TRUSTSERVER_PASSWORD__")%>);
                <% } %>

                if (!soapHeaders_<%=cid%>.isEmpty()) {
                    genericConsumer_<%=cid%>.setSoapHeaders(soapHeaders_<%=cid%>);
                }

                responseDoc_<%=cid%> = genericConsumer_<%=cid%>.invoke(requestTalendDoc_<%=cid%>.getDocument());
                <% if (useBusinessCorrelation || useSR) { %>
                    globalMap.put("<%=cid%>_CORRELATION_ID", genericConsumer_<%=cid%>.getCorrelationID());
                <% } %>
            } else {
                ESBConsumer consumer_<%=cid%> = this.registry.createConsumer(
                    new ESBEndpointInfo() {

                        @SuppressWarnings("serial")
                        private java.util.Map<String, Object> props = new java.util.HashMap<String, Object>() {{
                            put("dataFormat", "PAYLOAD");
                            put("portName", portName_<%=cid%>.toString());
                            put("serviceName", serviceName_<%=cid%>.toString());
                            put("defaultOperationName", "<%=method%>");
                            put("defaultOperationNameSpace", "");
                            put("soapAction", "<%=getStringParam("__SOAP_ACTION__")%>");
                            if (null != getClass().getResourceAsStream("wsdl/<%=cid%>.wsdl")) {
                                put("wsdlURL", "classpath:/" + this.getClass().getPackage().getName().replace(".", "/") + "/wsdl/<%=cid%>.wsdl");
                            }
                            put("publishedEndpointUrl", <%=getStringParam("__ESB_ENDPOINT__")%>);
                            put("COMMUNICATION_STYLE", "<%=getStringParam("__COMMUNICATION_STYLE__")%>");

                            put("logMessages", <%=logMessages%>);

                            // use Service Locator
                            put("useServiceLocator", <%=useSl%>);
                            <% if (useSl) { %>
                                put("LocatorSelectionStrategy", "<%=getStringParam("__SERVICE_LOCATOR_STRATEGY__")%>");
                                put("SL-PROPS", slCustomProps_<%=cid%>);
                            <% } %>
                            // use Service Activity Monitor
                            put("useServiceActivityMonitor", <%=useSAM%>);

                            <% if (useSR) { %>
                                put("useServiceRegistry", <%=useSR%>);
                                put("username", <%=username%>);
                                put("password", <%=password%>);
                                <% if (!authorizationRole.isEmpty() && !"\"\"".equals(authorizationRole)) { %>
                                    put("role", <%=authorizationRole%>);
                                <% } %>
                                <% if (useCrypto) { %>
                                    put("useCrypto", <%=useCrypto%>);
                                <% } %>
                            <% } else if (useAuth) { %>
                                <% if (useSAML) { %>
                                    <% if (useAuthorization) { %>
                                        put("role", <%=authorizationRole%>);
                                    <% }if (useCrypto) { %>
                                        put("useCrypto", <%=useCrypto%>);
                                    <% } %>
                                <% } %>
                                put("esbSecurity", "<%=authType%>");
                                put("username", <%=username%>);
                                put("password", <%=password%>);
                                <% } %>

                            if (!soapHeaders_<%=cid%>.isEmpty()) {
                                put("soapHeaders", soapHeaders_<%=cid%>);
                            }
                            <% if (authPropagateUP || authPropagateCertificate) { %>
                                put("securityToken", securityToken_<%=cid%>);
                            <% }
                            if (authPropagateCertificate) { %>
                                String alias_<%=cid%> = <%=alias%>;
                                if (null != alias_<%=cid%> && !"".equals(alias_<%=cid%>.trim())) {
                                    put("alias", alias_<%=cid%>);
                                }
                            <% }
                            if (useBusinessCorrelation || useSR) { %>
                                put(org.talend.esb.policy.correlation.feature.CorrelationIDFeature.CORRELATION_ID_CALLBACK_HANDLER, correlationIDCallbackHandler);
                                put("enhancedResponse", true);
                            <% } %>
                        }};

                        public String getEndpointUri() {
                            // projectName + "_" + processName + "_" + componentName
                            return "<%=projectName%>_<%=processName%>_<%=cid%>";
                        }

                        public java.util.Map<String, Object> getEndpointProperties() {
                            return props;
                        }

                        public String getEndpointKey() {
                            return "cxf";
                        }
                    }
                );

                Object request_<%=cid%> = wrapPayload(requestTalendDoc_<%=cid%>.getDocument(), customProps_<%=cid%>);
                Object consumerResponse_<%=cid%> = consumer_<%=cid%>.invoke(request_<%=cid%>);
                if (null == consumerResponse_<%=cid%>) {
                    // one way call
                } else {
                    if(consumerResponse_<%=cid%> instanceof java.util.Map) {
                        java.util.Map<?,?> responseMap_<%=cid%> = (java.util.Map<?,?>)consumerResponse_<%=cid%>;
                        responseDoc_<%=cid%> = (org.dom4j.Document) responseMap_<%=cid%>.get("payload");
                        <% if (useBusinessCorrelation || useSR) { %>
                            globalMap.put("<%=cid%>_CORRELATION_ID", responseMap_<%=cid%>.get(org.talend.esb.policy.correlation.feature.CorrelationIDFeature.MESSAGE_CORRELATION_ID));
                        <% } %>
                    } else if (consumerResponse_<%=cid%> instanceof org.dom4j.Document) {
                        responseDoc_<%=cid%> = (org.dom4j.Document) consumerResponse_<%=cid%>;
                    } else {
                        throw new RuntimeException("Incompatible consumer response: " + consumerResponse_<%=cid%>.getClass().getName());
                    }
                }
            }
            <% if (null != connResponse) {
                String connResponseName = connResponse.getName(); %>
                if (<%=connResponseName%> == null) {
                    <%=connResponseName%> = new <%=connResponseName%>Struct();
                }
                routines.system.Document responseTalendDoc_<%=cid%> = null;
                if (null != responseDoc_<%=cid%>) {
                    responseTalendDoc_<%=cid%> = new routines.system.Document();
                    responseTalendDoc_<%=cid%>.setDocument(responseDoc_<%=cid%>);
                }
                <%=connResponseName%>.payload = responseTalendDoc_<%=cid%>;
            <% } %>
        } catch (org.apache.cxf.binding.soap.SoapFault e_<%=cid%>) {
            <% if (null != connFault) {
                String connFaultName = connFault.getName(); %>
                if (<%=connFaultName%> == null) {
                    <%=connFaultName%> = new <%=connFaultName%>Struct();
                }
                <%=connFaultName%>.faultCode = e_<%=cid%>.getFaultCode().toString();

                <%=connFaultName%>.faultString = e_<%=cid%>.getReason();
                <%=connFaultName%>.faultActor = e_<%=cid%>.getRole();
                <%=connFaultName%>.faultNode = e_<%=cid%>.getNode();

                if (null != e_<%=cid%>.getDetail() && null != e_<%=cid%>.getDetail().getFirstChild()) {
                    javax.xml.transform.Source faultSource_<%=cid%> =
                        new javax.xml.transform.dom.DOMSource(e_<%=cid%>.getDetail().getFirstChild());
                    <%=connFaultName%>.faultDetail = new routines.system.Document();
                    <%=connFaultName%>.faultDetail.setDocument(GenericConsumer.sourceToDocument(faultSource_<%=cid%>));
                }
            <% } else { %>
                e_<%=cid%>.printStackTrace(System.err);
            <% } %>
        } catch (GenericFaultInfoException e_<%=cid%>) {
            <% if (null != connFault) {
                String connFaultName = connFault.getName(); %>
                if (<%=connFaultName%> == null) {
                    <%=connFaultName%> = new <%=connFaultName%>Struct();
                }
                <%=connFaultName%>.faultString = e_<%=cid%>.getMessage();

                <%=connFaultName%>.faultDetail = new routines.system.Document();
                <%=connFaultName%>.faultDetail.setDocument((org.dom4j.Document) e_<%=cid%>.getFaultInfo());
            <% } else { %>
                System.err.println(e_<%=cid%>.getMessage() + ": " + ((org.dom4j.Document) e_<%=cid%>.getFaultInfo()).asXML());
            <% } %>
        } catch (javax.xml.ws.soap.SOAPFaultException e_<%=cid%>) {
            <% if (null != connFault) {
                String connFaultName = connFault.getName(); %>
                javax.xml.soap.SOAPFault soapFault_<%=cid%> = e_<%=cid%>.getFault();
                org.dom4j.Document faultDoc_<%=cid%> = null;
                if (null != soapFault_<%=cid%>.getDetail() && null != soapFault_<%=cid%>.getDetail().getFirstChild()) {
                    try {
                        javax.xml.transform.Source faultSource_<%=cid%> =
                            new javax.xml.transform.dom.DOMSource(soapFault_<%=cid%>.getDetail().getFirstChild());

                        org.dom4j.io.DocumentResult result_<%=cid%> = new org.dom4j.io.DocumentResult();
                        javax.xml.transform.TransformerFactory.newInstance()
                            .newTransformer().transform(faultSource_<%=cid%>, result_<%=cid%>);
                        faultDoc_<%=cid%> = result_<%=cid%>.getDocument();
                    } catch (Exception e1_<%=cid%>) {
                        e1_<%=cid%>.printStackTrace();
                    }
                }

                if (<%=connFaultName%> == null) {
                    <%=connFaultName%> = new <%=connFaultName%>Struct();
                }
                <%=connFaultName%>.faultCode = soapFault_<%=cid%>.getFaultCodeAsQName().toString();
                <%=connFaultName%>.faultString = soapFault_<%=cid%>.getFaultString();
                <%=connFaultName%>.faultActor = soapFault_<%=cid%>.getFaultActor();

                <%=connFaultName%>.faultNode = null;
                <%=connFaultName%>.faultRole = null;
                if (javax.xml.soap.SOAPConstants.URI_NS_SOAP_1_2_ENVELOPE.equals(soapFault_<%=cid%>.getNamespaceURI())) {
                    // SOAP 1.2
                    try {
                        <%=connFaultName%>.faultNode = soapFault_<%=cid%>.getFaultNode();
                        <%=connFaultName%>.faultRole = soapFault_<%=cid%>.getFaultRole();
                    } catch (java.lang.UnsupportedOperationException uoe_<%=cid%>) { }
                }

                routines.system.Document faultTalendDoc_<%=cid%> = null;
                if (null != faultDoc_<%=cid%>) {
                    faultTalendDoc_<%=cid%> = new routines.system.Document();
                    faultTalendDoc_<%=cid%>.setDocument(faultDoc_<%=cid%>);
                }
                <%=connFaultName%>.faultDetail = faultTalendDoc_<%=cid%>;
            <% } else { %>
                e_<%=cid%>.printStackTrace();
            <% } %>
        }
    } catch (Exception e_<%=cid%>){
        <% if (getBoolParam("__DIE_ON_ERROR__")) { %>
            throw(e_<%=cid%>);
        <% } else { %>
            new TalendException(e_<%=cid%>,currentComponent,globalMap).printStackTrace();
        <% } %>
    }

<% } %>
<% clearCache(); %>