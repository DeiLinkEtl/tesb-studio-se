<%@ jet
imports="
		org.talend.core.model.process.INode
		org.talend.core.model.metadata.IMetadataTable
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.core.model.process.ElementParameterParser
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		java.util.List
		java.util.Map
		java.util.HashMap
"
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

String projectName = codeGenArgument.getCurrentProjectName();
String processName = node.getProcess().getName();

String endpoint = ElementParameterParser.getValue(node,"__ENDPOINT__");

String serviceNS = ElementParameterParser.getValue(node,"__SERVICE_NS__");
String serviceName = ElementParameterParser.getValue(node,"__SERVICE_NAME__");
String portNS = ElementParameterParser.getValue(node,"__PORT_NS__");
String portName = ElementParameterParser.getValue(node,"__PORT_NAME__");

String methodTemp = ElementParameterParser.getValue(node,"__METHOD__");
String method = methodTemp.indexOf("(")!=-1?methodTemp.substring(0,methodTemp.indexOf("(")):methodTemp;

String soapAction = ElementParameterParser.getValue(node,"__SOAPACTION__");
String methodNS = ElementParameterParser.getValue(node,"__METHOD_NS__");

Boolean useSl = Boolean.valueOf(ElementParameterParser.getValue(node, "__SERVICE_LOCATOR__"));
String slStrategy = ElementParameterParser.getValue(node, "__SERVICE_LOCATOR_STRATEGY__");

Boolean useSam = Boolean.valueOf(ElementParameterParser.getValue(node, "__SERVICE_ACTIVITY_MONITOR__"));
%>
javax.xml.namespace.QName serviceName_<%=cid%> = null;
javax.xml.namespace.QName portName_<%=cid%> = null;
org.talend.ws.helper.ServiceInvokerHelper serviceInvokerHelper_<%=cid%> = null ;

ESBConsumer consumer_<%=cid%> = null;
if (this.registry != null) {
	consumer_<%=cid%> = this.registry.createConsumer(
		new ESBEndpointInfo() {
			@SuppressWarnings("serial")
			private java.util.Map<String, Object> props = new java.util.HashMap<String, Object>() {{
				put("wsdlURL", <%=endpoint%>);
				put("dataFormat", "PAYLOAD");
				put("portName", "{<%=portNS%>}<%=portName%>");
				put("serviceName", "{<%=serviceNS%>}<%=serviceName%>");
				put("defaultOperationName", "<%=method%>");
				put("defaultOperationNameSpace", "");
				put("publishedEndpointUrl", <%=ElementParameterParser.getValue(node, "__ESB_ENDPOINT__")%>);
				put("COMMUNICATION_STYLE", "<%=ElementParameterParser.getValue(node, "__COMMUNICATION_STYLE__")%>");

				// use Service Locator
				put("useServiceLocator", <%=useSl%>);
				<%if (useSl) { %>
				put("LocatorSelectionStrategy", "<%=slStrategy%>");
				<% } %>
 				// use Service Activity Monitor
				put("useServiceActivityMonitor", <%=useSam%>);

				<% String esbSecurity = ElementParameterParser.getValue(node, "__ESB_SECURITY__"); %>
				put("esbSecurity", "<%=esbSecurity%>");
				<% if ("SAML".equals(esbSecurity) || "TOKEN".equals(esbSecurity)) { %>
					put("username", <%=ElementParameterParser.getValue(node, "__AUTH_USERNAME__")%>);
					put("password", <%=ElementParameterParser.getValue(node, "__AUTH_PASSWORD__")%>);
				<% } %>
			}};

			public String getEndpointUri() {
				// projectName + "_" + processName + "_" + componentName
				return "<%=projectName%>_<%=processName%>_<%=cid%>";
			}

			public java.util.Map<String, Object> getEndpointProperties() {
				return props;
			}

			public String getEndpointKey() {
				return "cxf";
			}
		}
	);
} else {
<%
boolean useNTLM = ("true").equals(ElementParameterParser.getValue(node,"__USE_NTLM__"));
String domain = ElementParameterParser.getValue(node,"__NTLM_DOMAIN__");
String host = ElementParameterParser.getValue(node,"__NTLM_HOST__");

String authType = ElementParameterParser.getValue(node,"__ESB_SECURITY__");
String username = ElementParameterParser.getValue(node,"__AUTH_USERNAME__");
String password = ElementParameterParser.getValue(node,"__AUTH_PASSWORD__");

boolean useProxy = ("true").equals(ElementParameterParser.getValue(node,"__USE_PROXY__"));
String proxyHost = ElementParameterParser.getValue(node,"__PROXY_HOST__");
String proxyPort = ElementParameterParser.getValue(node,"__PROXY_PORT__");
String proxyUser = ElementParameterParser.getValue(node,"__PROXY_USERNAME__");
String proxyPassword = ElementParameterParser.getValue(node,"__PROXY_PASSWORD__");

boolean needSSLtoTrustServer = ("true").equals(ElementParameterParser.getValue(node,"__NEED_SSL_TO_TRUSTSERVER__"));
String trustStoreFile = ElementParameterParser.getValue(node,"__SSL_TRUSTSERVER_TRUSTSTORE__");
String trustStorePassword = ElementParameterParser.getValue(node,"__SSL_TRUSTSERVER_PASSWORD__");

String connTimeoutStr = ElementParameterParser.getValue(node,"__CONNECTION_TIMEOUT__");
String connTimeoutSec = (connTimeoutStr!=null&&!("").equals(connTimeoutStr))?connTimeoutStr:"20";
long connTimeout = (long)(Double.valueOf(connTimeoutSec) * 1000);

String receiveTimeoutStr = ElementParameterParser.getValue(node,"__RECEIVE_TIMEOUT__");
String receiveTimeoutSec = (receiveTimeoutStr!=null&&!("").equals(receiveTimeoutStr))?receiveTimeoutStr:"20";
long receiveTimeout = (long)(Double.valueOf(receiveTimeoutSec) * 1000);

String tempPath = ElementParameterParser.getValue(node,"__TMPPATH__");
if("".equals(tempPath))tempPath="\"\"";

%>
System.out.println("<%=serviceName%>");
System.out.println("<%=portName%>");
System.out.println("<%=methodNS%>|<%=soapAction%>");

class Util_<%=cid%> {

	public final String LIST_SIZE_SYMBOL = ".size";

		public final String LEFT_SQUARE_BRACKET = "[";

		public final String RIGHT_SQUARE_BRACKET = "]";

		public final String ALL_LIST_SYMBOL = "[*]";

		public Object getValue(java.util.Map<String, Object> map, String path) {
			if (path == null || "".equals(path)) {
				return null;
			}
			if (map == null||map.isEmpty()) {
				return null;
			}
			java.util.List<String> paths = new java.util.ArrayList<String>();
			resolvePath(map, path, paths);
			if (paths.size() > 0) {
				if (path.indexOf(ALL_LIST_SYMBOL) == -1) {
					return map.get(paths.get(0));
				} else {
					int size = paths.size();
					java.util.List<Object> out = new java.util.ArrayList<Object>(size);
					for (int i = 0; i < size; i++) {
						out.add(map.get(paths.get(i)));
					}
					return out;
				}
			} else {
				return null;
			}
		}

		public void resolveInputPath(java.util.Map<String, Object> inputMap) {
			java.util.Map<String, Object> tempStoreMap = new java.util.HashMap<String, Object>();
			java.util.List<String> tempRemovePath = new java.util.ArrayList<String>();
			for (String key : inputMap.keySet()) {
				if (key.indexOf(ALL_LIST_SYMBOL) != -1) {
					String listHeadPath = key.substring(0, key.indexOf(ALL_LIST_SYMBOL));
					String listFootPath = key.substring(key.indexOf(ALL_LIST_SYMBOL) + ALL_LIST_SYMBOL.length());
					java.util.List listElement = (java.util.List) inputMap.get(key);
					for (int i = 0; i < listElement.size(); i++) {
						tempStoreMap.put(listHeadPath + LEFT_SQUARE_BRACKET + i + RIGHT_SQUARE_BRACKET + listFootPath, listElement.get(i));
					}
					tempRemovePath.add(key);
				}
			}
			inputMap.putAll(tempStoreMap);
			for (String removePath : tempRemovePath) {
				inputMap.remove(removePath);
			}
		}

		public void resolvePath(java.util.Map<String, Object> map, String path, java.util.List<String> paths) {
			String listHeadPath = "";
			String listFootPath = "";
			int size = 0;
			String tempPath = "";
			if (path.indexOf(ALL_LIST_SYMBOL) != -1) {
				listHeadPath = path.substring(0, path.indexOf(ALL_LIST_SYMBOL));
				listFootPath = path.substring(path.indexOf(ALL_LIST_SYMBOL) + ALL_LIST_SYMBOL.length());
				if (map.get(listHeadPath) == null && map.get(listHeadPath + LIST_SIZE_SYMBOL) != null) {
					size = Integer.parseInt(map.get(listHeadPath + LIST_SIZE_SYMBOL).toString());
					for (int i = 0; i < size; i++) {
						tempPath = listHeadPath + LEFT_SQUARE_BRACKET + i + RIGHT_SQUARE_BRACKET + listFootPath;
						if (tempPath.indexOf(ALL_LIST_SYMBOL) != -1) {
							resolvePath(map, tempPath, paths);
						} else {
							paths.add(tempPath);
						}
					}
				}
			} else {
					paths.add(path);
			}
		}

		public java.util.List<Object> normalize(String inputValue, String delimiter) {
			if (inputValue == null || "".equals(inputValue)) {
				return null;
			}
			Object[] inputValues = inputValue.split(delimiter);
			return java.util.Arrays.asList(inputValues);
		}

		public String denormalize(java.util.List inputValues, String delimiter) {
			if (inputValues == null||inputValues.isEmpty()) {
				return null;
			}
			StringBuffer sb = new StringBuffer();
			for (Object o : inputValues) {
				sb.append(String.valueOf(o));
				sb.append(delimiter);
			}
			if (sb.length() > 0) {
				sb.delete(sb.length() - delimiter.length(),sb.length());
			}
			return sb.toString();
		}
}
	System.setProperty("org.apache.commons.logging.Log", "org.apache.commons.logging.impl.NoOpLog");
	//shade the log level for DynamicClientFactory.class
	java.util.logging.Logger LOG_<%=cid%> = org.apache.cxf.common.logging.LogUtils.getL7dLogger(org.apache.cxf.endpoint.dynamic.DynamicClientFactory.class);
	LOG_<%=cid%>.setLevel(java.util.logging.Level.WARNING);

	Util_<%=cid%> util_<%=cid%> = new Util_<%=cid%>();

	org.talend.ws.helper.conf.ServiceHelperConfiguration config_<%=cid%> = new org.talend.ws.helper.conf.ServiceHelperConfiguration();

	config_<%=cid%>.setConnectionTimeout(Long.valueOf(<%=connTimeout%>));
	config_<%=cid%>.setReceiveTimeout(Long.valueOf(<%=receiveTimeout%>));

	config_<%=cid%>.setKeyStoreFile(System.getProperty("javax.net.ssl.keyStore"));
	config_<%=cid%>.setKeyStoreType(System.getProperty("javax.net.ssl.keyStoreType"));
	config_<%=cid%>.setKeyStorePwd(System.getProperty("javax.net.ssl.keyStorePassword"));
<%
if (needSSLtoTrustServer) {
%>
	System.setProperty("java.protocol.handler.pkgs", "com.sun.net.ssl.internal.www.protocol");

	System.setProperty("javax.net.ssl.trustStore", <%=trustStoreFile %>);
	System.setProperty("javax.net.ssl.trustStorePassword", <%=trustStorePassword %>);
<%
}
if ("TOKEN".equals(authType) && !useNTLM) {
%>
	config_<%=cid%>.setUsername(<%=username%>);
	config_<%=cid%>.setPassword(<%=password%>);
<%
} else if("TOKEN".equals(authType) && useNTLM) {
%>
	jcifs.Config.setProperty("jcifs.smb.client.username", <%=username%>);
	jcifs.Config.setProperty("jcifs.smb.client.password", <%=password%>);
<%
}
if(useProxy) {
%>
	config_<%=cid%>.setProxyServer(<%=proxyHost %>);
	config_<%=cid%>.setProxyPort(<%=proxyPort %>);
	config_<%=cid%>.setProxyUsername(<%=proxyUser %>);
	config_<%=cid%>.setProxyPassword( <%=proxyPassword %>);
<%
}
if(useNTLM) {
%>
	jcifs.Config.setProperty("jcifs.smb.client.domain", <%=domain%>);
	jcifs.Config.setProperty("jcifs.netbios.wins", <%=host%>);
	jcifs.Config.registerSmbURLHandler();
<%
}
%>
	org.talend.ws.helper.ServiceDiscoveryHelper serviceDiscoveryHelper_<%=cid%> = null ;

<% if (!useNTLM) { %>
	java.net.URI uri_<%=cid%> = new java.net.URI(<%=endpoint%>);
	if ("http".equals(uri_<%=cid%>.getScheme()) || "https".equals(uri_<%=cid%>.getScheme())) {
		serviceInvokerHelper_<%=cid%> = new org.talend.ws.helper.ServiceInvokerHelper(<%=endpoint%>,config_<%=cid%>,<%=tempPath%>);
	} else {
<% } %>
		serviceDiscoveryHelper_<%=cid%> = new org.talend.ws.helper.ServiceDiscoveryHelper(<%=endpoint%>,<%=tempPath%>);
		serviceInvokerHelper_<%=cid%> = new org.talend.ws.helper.ServiceInvokerHelper(serviceDiscoveryHelper_<%=cid%>,config_<%=cid%>);
<% if (!useNTLM) { %>
	}
<% } %>

	serviceName_<%=cid%> = new javax.xml.namespace.QName("<%=serviceNS%>", "<%=serviceName%>");
	portName_<%=cid%> = new javax.xml.namespace.QName("<%=portNS%>", "<%=portName%>");

	java.util.Map<String,Object> inMap_<%=cid%> = null;

}
