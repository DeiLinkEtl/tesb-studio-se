<%@ jet
	imports="
		org.talend.core.model.process.ElementParameterParser
		org.talend.core.model.process.INode
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.designer.codegen.config.CodeGeneratorArgument
		
		java.util.List
		java.util.Map
		java.util.HashMap
	"
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode) codeGenArgument.getArgument();
	String cid = node.getUniqueName();

	if (node.getProcess().getNodesOfType("tHTTPRequest").size() > 1) { %>
		if (true) {
			throw new RuntimeException("cannot instantiate REST service: job contains more than one tHTTPRequest component");
		}
<%	}

	List<? extends IConnection> conns = node.getOutgoingSortedConnections();
	boolean hasOutputConnection = false;
	if (null != conns && !conns.isEmpty()) {
		for (int i = 0; i < conns.size(); i++) {
			IConnection connTemp = conns.get(i);
			if (connTemp.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
				hasOutputConnection = true; %>
					<%=connTemp.getName() %> = null;
<%
			}
		}
	}
	if (!hasOutputConnection) { %>
		if (true) {
			throw new RuntimeException("cannot instantiate REST service: tHTTPRequest component has no any output connections");
		}
<%	}
//	Map<String, String> restMapping = new HashMap<String, String>();
//	List<Map<String, String>> mappings = (List<Map<String, String>>) ElementParameterParser.getObjectValue(node, "__SCHEMAS__");
//	for (Map<String, String> mapping : mappings) {
//		String outpuFlow = mapping.get("SCHEMA");
//		String uriPattern = mapping.get("URI_PATTERN");
//		String httpWord = mapping.get("HTTP_VERB");
//		
//		restMapping.put(outpuFlow, uriPattern);  // TODO: !!! now last win !!!
		
		// TODO: validation:
		// 1. uri != null && uri.trim().length() > 0 && ??? uri.trim().startsWith("/")
		// 2. ??? uri format by REST API
		// 3. ??? uri parameters unique
		// 4. ??? uris in set are not interfere
		// N. ??? uri parameters reflected as corresponding flow fields
//	}

	boolean isOneWay = node.getProcess().getNodesOfType("tHTTPResponse").isEmpty();
%>

//*** external processor(s) initialization

	// ESBProviderCallbackTalendJobInner providerCallback_<%=cid%>;
	ESBProviderCallback providerCallback_<%=cid%>;
	HandlerThread_<%=cid%> handlerThread_<%=cid%> = null;
//	if (null == this.callback) {
		final QueuedMessageHandlerImpl<java.util.Map<String, Object>> handler_<%=cid%> =
			new QueuedMessageHandlerImpl<java.util.Map<String, Object>>();
		handlerThread_<%=cid%> =
			new HandlerThread_<%=cid%>(handler_<%=cid%>); //
		handlerThread_<%=cid%>.start();
		// providerCallback_<%=cid%> = new ESBProviderCallbackTalendJobWrapper_<%=cid%>(handler_<%=cid%>);
		providerCallback_<%=cid%> = handler_<%=cid%>;
//	} else {
//		// providerCallback_<%=cid%> = new ESBProviderCallbackTalendJobWrapper_<%=cid%>(this.callback);
//		providerCallback_<%=cid%> = this.callback;
//	}

	globalMap.put("esbHandler", providerCallback_<%=cid%>);

//*** external processor(s) initialization finish

int nb_line_<%=cid%> = 0;

try {
	// This is a beginning of the ESB provider request component cycle
	while(true) {
		try {

