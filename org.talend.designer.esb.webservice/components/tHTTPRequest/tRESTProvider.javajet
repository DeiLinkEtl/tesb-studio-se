/**
 * queued message exchange
 */
class QueuedExchangeContextImpl<T> {

	/**
	 * Exchange timeout in seconds
	 */
	private static final long EXCHANGE_TIMEOUT = 50;

	private final java.util.concurrent.Exchanger<Exception> exceptionExchange =
		new java.util.concurrent.Exchanger<Exception>();
	private final java.util.concurrent.CountDownLatch latch =
		new java.util.concurrent.CountDownLatch(1);

	private final T input;
	
	private T output = null;

	public QueuedExchangeContextImpl(T input) {
		this.input = input;
	}

	/**
	 * Don't forget to call this method when you are done
	 * with processing of the {@link QueuedExchangeContext}
	 */
	public void release() throws Exception {
		latch.countDown();
		Exception exception;
		try {
			exception = exceptionExchange.exchange(null, EXCHANGE_TIMEOUT,
					java.util.concurrent.TimeUnit.SECONDS);
		} catch (InterruptedException e) {
			throw new Exception(e);
		} catch (java.util.concurrent.TimeoutException e) {
			throw new Exception(e);
		}
		if (exception != null) {
			throw exception;
		}
	}

	/**
	 * This operation have to be called on the Web Service
	 * thread to send response if required
	 *
	 * @throws InterruptedException
	 */
	public void completeQueuedProcessing() throws InterruptedException {
		exceptionExchange.exchange(null);
	}

	/**
	 * @throws InterruptedException
	 */
	void waitForRelease(long timeout, java.util.concurrent.TimeUnit unit)
			throws InterruptedException {
		latch.await(timeout, unit);
	}

	public T getInput() {
		return input;
	}
	
	public void serveOutput(T response) {
		output = response;
	}

	public T getResponse() {
		return output;
	}
}

/**
 * message exchange controller
 */
class QueuedMessageHandlerImpl<T> implements ESBProviderCallback {
	private final int MAX_QUEUE_SIZE = 1000;

	private final int WAIT_TIMEOUT_SECONDS = 120;

	private final java.util.concurrent.BlockingQueue<QueuedExchangeContextImpl<?>> queue =
		new java.util.concurrent.LinkedBlockingQueue<QueuedExchangeContextImpl<?>>(MAX_QUEUE_SIZE);

	/**
	 * This method add a newly created
	 * {@link QueuedExchangeContextImpl} into the internal
	 * blocking queue where consumer thread is waiting for it.
	 * Then it waits until the {@link QueuedExchangeContextImpl}
	 * will be completed for request-response operations
	 */
	public QueuedExchangeContextImpl<T> invoke(T request) {
		QueuedExchangeContextImpl<T> context =
			new QueuedExchangeContextImpl<T>(request);
		boolean inserted = queue.offer(context);
		if (!inserted) {
			try {
				context.release();
			} catch (Exception e) {
				e.printStackTrace();
			}
			throw new RuntimeException(
					"Can't queue request, queue size of "
							+ MAX_QUEUE_SIZE + " is exceeded");
		} else {
			try {
				context.waitForRelease(WAIT_TIMEOUT_SECONDS,
						java.util.concurrent.TimeUnit.SECONDS);
			} catch (InterruptedException ie) {
				throw new RuntimeException(
						"job execution timeout: " + ie.getMessage());
			}
		}
		return context;
	}

	QueuedExchangeContextImpl<T> currentExchangeContext;

	public T getRequest() throws ESBJobInterruptedException {
		currentExchangeContext = null;
		try {
			currentExchangeContext = (QueuedExchangeContextImpl<T>) queue.take();
		} catch (InterruptedException e) {
			throw new RuntimeException(e);
		}
		return currentExchangeContext.getInput();
	}

	public void sendResponse(Object output) {
		if (null == currentExchangeContext) {
			throw new RuntimeException("sendResponse() invoked before getRequest()");
		}

		currentExchangeContext.serveOutput((T) output);

		try {
			currentExchangeContext.release();
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}
}

/**
 * REST provider implementation
 */
@javax.ws.rs.Path("/")
@javax.ws.rs.Produces("text/plain")
@javax.ws.rs.Consumes("text/plain")
class RESTProvider_<%=cid%> {

	private QueuedMessageHandlerImpl<java.util.Map<String, Object>> messageHandler;
	
	public RESTProvider_<%=cid%>(
			QueuedMessageHandlerImpl<java.util.Map<String, Object>> messageHandler) {
		this.messageHandler = messageHandler;
	}
	
	private java.util.Map<String, String> getPathParameters(javax.ws.rs.core.UriInfo uriInfo) {
		java.util.Map<String, String> params = new java.util.HashMap<String, String>();
		javax.ws.rs.core.MultivaluedMap<String, String> pathParams = uriInfo.getPathParameters();
		for (String paramName : pathParams.keySet()) {
			params.put(paramName, pathParams.getFirst(paramName));
		}
		return params;
	}
<%
if (null != conns && !conns.isEmpty()) {
	for(IConnection conn : conns) {
		if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
			String name = conn.getName();
			String type = conn.getConnectorName();
			String uri = restMapping.get(name);
%>
	@javax.ws.rs.<%=type%>()
<% if (null != uri) { %>
	@javax.ws.rs.Path(<%=uri%>)
<% } %>
	public javax.ws.rs.core.Response <%=name%>(
			@javax.ws.rs.core.Context javax.ws.rs.core.UriInfo uriInfo, String body) {

		java.util.Map<String, Object> request = new java.util.HashMap<String, Object>();
		request.put("WORD", "<%=type%>");
		request.put("OPERATION", "<%=name%>");
		request.put("URI", uriInfo.getPath());
		request.put("PATTERN", <%=uri%>);
		request.put("PARAMS", getPathParameters(uriInfo));
		request.put("BODY", body);

		try {
			QueuedExchangeContextImpl<java.util.Map<String, Object>> messageExchange =
				messageHandler.invoke(request);
			
			try {
<% if (isOneWay) { %>
				// return null;
				return javax.ws.rs.core.Response.status(200).build();
<% } else { %>
				java.util.Map<String, Object> responseMap = messageExchange.getResponse();
				String responseBody = (String) responseMap.get("BODY");
				Integer status = (Integer) responseMap.get("STATUS");
				if (null == status) {
					status = 200;
				}
				
				return javax.ws.rs.core.Response.status(status).entity(responseBody).build();
<% } %>
			} finally {
				messageExchange.completeQueuedProcessing();
			}

		} catch (RuntimeException ex) {
			throw new javax.ws.rs.WebApplicationException(ex, 500);
		} catch (Throwable ex) {
			ex.printStackTrace();
			throw new javax.ws.rs.WebApplicationException(ex, 500);
		} finally {
			// System.out.println(System.currentTimeMillis() + " <- handleMessage");
		}
	}
<%
		}
	}
}
%>
}

/*
class ESBProviderCallbackTalendJobWrapper_<%=cid%> implements ESBProviderCallbackTalendJobInner {

	private final String TNS = ESBProvider_<%=cid%>.class.getAnnotation(
			javax.jws.WebService.class).targetNamespace();

	private ESBProviderCallback esbProviderCallback;
	private java.util.Map<String, String> customProperty;

	public ESBProviderCallbackTalendJobWrapper_<%=cid%>(ESBProviderCallback callback) {
		esbProviderCallback = callback;
	}

	public Object getRequest() throws ESBJobInterruptedException {
		return esbProviderCallback.getRequest();
	}

	public void setCustomProperties(java.util.Map<String, String> props) {
		customProperty = props;
	}

	public void sendResponse(Object response) {
		esbProviderCallback.sendResponse(wrapOutput(response));
	}

	public void sendFault(Throwable error) {
		RuntimeException talendJobError;
		if (error instanceof RuntimeException) {
			talendJobError = (RuntimeException) error;
		} else {
			talendJobError = new RuntimeException(
					"Talend job execution error", error);
		}
		esbProviderCallback.sendResponse(talendJobError);
	}

	public void sendBusinessFault(String faultString,
			org.dom4j.Document faultDetail) {

		try {
			javax.xml.soap.SOAPFactory soapFactory =
				javax.xml.soap.SOAPFactory.newInstance();
			javax.xml.soap.SOAPFault soapFault = soapFactory.createFault(
					faultString, new javax.xml.namespace.QName(TNS, "businessFault"));
			if (null != faultDetail) {
				// System.out.println("business fault details: " + faultDoc.asXML());
				// A special version of DOMWriter that does not write xmlns:foo attributes
				org.dom4j.io.DOMWriter writer = new org.dom4j.io.DOMWriter() {
					protected void writeNamespace(org.w3c.dom.Element domElement, org.dom4j.Namespace namespace) {
						// Do nothing
					}
				};
				org.w3c.dom.Document faultDetailDom = writer.write(faultDetail);
				soapFault.addDetail().appendChild(
						soapFault.getOwnerDocument().importNode(
								faultDetailDom.getDocumentElement(), true));
			}
			esbProviderCallback.sendResponse(
					wrapOutput(new javax.xml.ws.soap.SOAPFaultException(soapFault)));
		} catch (Exception e) {
			this.sendFault(e);
		}
	}

	private Object wrapOutput(Object output) {
		if (esbProviderCallback instanceof QueuedMessageHandlerImpl) {
			return output;
		}
		return wrapPayload(output, customProperty);
	}
}
*/

class HandlerThread_<%=cid%> extends Thread {

	private QueuedMessageHandlerImpl<java.util.Map<String, Object>> handler;
	
	private final String endpointUrl = <%=ElementParameterParser.getValue(node, "__REST_ENDPOINT__")%>;

	private org.apache.cxf.endpoint.Server server;

	public HandlerThread_<%=cid%>(QueuedMessageHandlerImpl<java.util.Map<String, Object>> handler) {
		this.handler = handler;
	}

	public void run() {
		// RESTProvider_<%=cid%> restProvider = new RESTProvider_<%=cid%>(handler);

		try {
			org.apache.cxf.jaxrs.JAXRSServerFactoryBean sf =
					new org.apache.cxf.jaxrs.JAXRSServerFactoryBean();
			sf.setTransportId("http://cxf.apache.org/transports/http");
			sf.setResourceClasses(RESTProvider_<%=cid%>.class);
			sf.setResourceProvider(RESTProvider_<%=cid%>.class,
					new org.apache.cxf.jaxrs.lifecycle.SingletonResourceProvider(
							new RESTProvider_<%=cid%>(handler)));
			sf.setAddress(endpointUrl);
			server = sf.create();
		
			System.out.println("rest service [endpoint: " + endpointUrl + "] published");
		} catch (Throwable e) {
			java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
			e.printStackTrace(new java.io.PrintStream(baos));
			System.out.println("error:\n" + baos.toString());
		}
	}

	public void stopEndpoint() {
		if (null != server) {
			server.stop();
			server.destroy();
			System.out.println("rest service [endpoint: " + endpointUrl + "] unpublished");
		}
	}
}
