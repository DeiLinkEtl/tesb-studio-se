<%@ jet
	package="org.talend.designer.codegen.translators.common"
	imports="
		java.util.List
		java.util.Vector

		org.talend.core.model.process.INode
		org.talend.core.model.process.IProcess
		org.talend.core.model.process.ElementParameterParser
		org.talend.designer.codegen.config.CodeGeneratorArgument
	"
	class="Header_additional"
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
Vector v = (Vector) codeGenArgument.getArgument();
IProcess process = (IProcess)v.get(0);

boolean actAsProvider = !process.getNodesOfType("tESBProviderRequest").isEmpty();
boolean actAsConsumer = !process.getNodesOfType("tESBConsumer").isEmpty();

if (actAsProvider || actAsConsumer) { %>

	private ESBEndpointRegistry registry = null;
	private ESBProviderCallback callback = null;

	public void setEndpointRegistry(ESBEndpointRegistry registry) {
<% if (actAsConsumer) { %>		this.registry = registry;<% } %>
	}

	public void setProviderCallback(ESBProviderCallback callback) {
<% if (actAsProvider) { %>		this.callback = callback;<% } %>
	}

	public ESBEndpointInfo getEndpoint() {
<% if (actAsProvider) {
	String projectName = codeGenArgument.getCurrentProjectName();
	String processName = process.getName();
	INode node = process.getNodesOfType("tESBProviderRequest").get(0);

	boolean isOneWay = (process.getNodesOfType("tESBProviderFault").isEmpty()
		&& process.getNodesOfType("tESBProviderResponse").isEmpty());
	Boolean useSl = Boolean.valueOf(ElementParameterParser.getValue(node, "__SERVICELOCATOR__"));
	Boolean useSam = Boolean.valueOf(ElementParameterParser.getValue(node, "__SERVICEACTIVITYMONITOR__"));
	%>
		return new ESBEndpointInfo() {
			private String uri = <%=ElementParameterParser.getValue(node, "__ESB_ENDPOINT__")%>;
			@SuppressWarnings("serial")
			private java.util.Map<String, Object> props = new java.util.HashMap<String, Object>() {{
				// "request-response" or "one-way"
				put("COMMUNICATION_STYLE", "<%=(isOneWay)?"one-way":"request-response"%>");
				//
				put("dataFormat", "PAYLOAD");
				// static
				put("portName", "{<%=ElementParameterParser.getValue(node, "__PORT_NS__")%>}<%=ElementParameterParser.getValue(node, "__PORT_NAME__")%>");
				// local part is: projectName + "_" + processName
				put("serviceName", "{<%=ElementParameterParser.getValue(node, "__SERVICE_NS__")%>}<%=ElementParameterParser.getValue(node, "__SERVICE_NAME__")%>");
				// static
				<%
				String methodName = ElementParameterParser.getValue(node,"__METHOD__");
                methodName = methodName.split("\\(")[0];
				%>
				put("defaultOperationName", "<%=methodName%>");
				// static
				put("defaultOperationNameSpace", "");
				// endpoint URI configured in tESBProviderInput
				put("publishedEndpointUrl", uri);
 				// use Service Locator
				put("useServiceLocator", <%=useSl%>);
 				// use Service Activity Monitor
				put("useServiceActivityMonitor", <%=useSam%>);
				
			}};

			public String getEndpointKey() {
				return "cxf";
			}

			public String getEndpointUri() {
				// projectName + "_" + processName
				return "<%=projectName%>_<%=processName%>";
				// return uri;
			}

			public java.util.Map<String, Object> getEndpointProperties() {
				return props;
			}
		};
<% } else { %>
		return null;
<% } %>
	}
<% } %>

<% if (actAsProvider) { %>
	public class ProviderFault {

		final String message;
		final Object detail;

		public ProviderFault(String message) {
			this(message, null);
		}

		public ProviderFault(String message, Object detail) {
			this.message = message;
			this.detail = detail;
		}

		public String getMessage() {
			return message;
		}

		public Object getDetail() {
			return detail;
		}
	}
<% } %>
